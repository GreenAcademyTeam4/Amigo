<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>

<!-- 마이페이지 내 결제 목록 조회 화면 -->
<h1>결제 목록</h1>
<div>
    <div class="chargeHistoryList">
        <table>
            <thead>
            <tr>
                <th>주문 이름</th>
                <th>결제 금액</th>
                <th>결제 일자</th>
                <th>결제 방식</th>
            </tr>
            </thead>
            <tbody id="paymentList">
            <!-- 결제 내역 삽입 구역 -->
            </tbody>
        </table>

        <div id="paginationContainer">
            <!-- 페이지네이션 삽입 구역 -->
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    function fetchPage(page, size) {
        let fetchUrl = `http://localhost:8080/pay/paymentList`;

            // DTO 객체 생성 (예시)
            const dtoData = {
                page: page,
                size: size
            };

            // DTO 데이터를 JSON 대신 문자열로 변환하여 전송
            const dtoString = `page=${page}&size=${size}`;

            fetch(fetchUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/text', // Content-Type을 text로 설정
                },
                body: dtoString // 문자열 형태로 데이터 전송
            })
                    .then(response => response.json())
                .then(data => {
                    console.log(data);
                    renderPaymentList(data); // 결제 내역 렌더링
                    renderPagination(data.totalCount, data.totalPages, data.currentPage, data.pageSize);
                })
                .catch(error => {
                    console.error('Error:', error);
                })
    }

    // 날짜를 YYYY-MM-DD HH:MM:SS 형식으로 포맷
    function formatDate(dateString) {

        const date = new Date(dateString);

        // padStart(2, '0') -> 두자리, 0부터 시작(예: 08월/일/시/분/초)
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0'); // 월은 0부터 시작하므로 +1
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');

        return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
    }


    // 결제 내역 레더링 함수
    function renderPaymentList(paymentList) {
        const paymentListContainer = $('#paymentList');

        while (paymentListContainer.firstChild) {
            paymentListContainer.removeChild(paymentListContainer.firstChild);
        }
        const List = paymentList.chargeHistoryDTO;
        List.forEach(payment => {
            const tr = document.createElement('tr');

            const orderNameCell = document.createElement('td');
            orderNameCell.textContent = payment.orderName;
            tr.append(orderNameCell);

            const totalAmountCell = document.createElement('td');
            totalAmountCell.textContent = payment.totalAmount;
            tr.append(totalAmountCell);

            const approvedAtCell = document.createElement('td');
            approvedAtCell.textContent = formatDate(payment.approvedAt);
            tr.append(approvedAtCell);

            const methodCell = document.createElement('td');
            methodCell.textContent = payment.method;
            tr.append(methodCell);

            paymentListContainer.append(tr);
        });
    }




    // 페이지네이션을 렌더링 하는 함수
    function renderPagination(totalCount, totalPages, currentPage, pageSize) {

        const paginationContainer = $('#paginationContainer')

        // 기존 페이지네이션 항목 제거
        while (paginationContainer.firstChild) {
            paginationContainer.removeChild(paginationContainer.firstChild);
        }

        // 페이지네이션 리스트 생성
        const ul = document.createElement('ul');
        ul.className = 'pagination';

        //이전 페이지 링크
        const prevLi = document.createElement('li');
        prevLi.className = currentPage > 1 ? 'page-item' : 'page-item disabled';
        const prevLink = document.createElement('a');
        prevLink.className = 'page-link';
        prevLink.textContent = '<';
        prevLink.addEventListener('click', (event) => {
            event.preventDefault(); // 페이지 이동 및 새로 고침 방지
            if (currentPage > 1) {
                fetchPage(currentPage - 1, pageSize);
            }
            prevLi.appendChild(prevLink);
            ul.appendChild(prevLi);
        });

        const maxPages = 5; // 한 번에 표시할 최대 페이지 수
        let startPage = Math.max(1, currentPage - Math.floor(maxPages / 2));
        let endPage = Math.min(totalPages, startPage + maxPages - 1);

        // 시작 페이지를 조정하여 끝 페이지가 전체 페이지 수를 초과하지 않도록 합니다.
        if (endPage - startPage < maxPages - 1) {
            startPage = Math.max(1, endPage - maxPages + 1);
        }

        for (let i = startPage; i <= endPage; i++) {
            const li = document.createElement('li');
            li.className = i === currentPage ? 'page-item active' : 'page-item';
            const link = document.createElement('a');
            link.className = 'page-link';
            link.textContent = i;
            link.addEventListener('click', (event) => {
                event.preventDefault(); // 페이지 이동 및 새로 고침 방지
                fetchPage(i, pageSize);
            });
            li.appendChild(link);
            ul.appendChild(li);
        }

        // 다음 페이지 링크
        const nextLi = document.createElement('li');
        nextLi.className = currentPage < totalPages ? 'page-item' : 'page-item disabled';
        const nextLink = document.createElement('a');
        nextLink.className = 'page-link';
        nextLink.textContent = '>';
        nextLink.addEventListener('click', (event) => {
            event.preventDefault(); // 페이지 이동 및 새로 고침 방지
            if (currentPage < totalPages) {
                fetchPage(currentPage + 1, pageSize);
            }
        });
        nextLi.appendChild(nextLink);
        ul.appendChild(nextLi);

        // 완성된 페이지네이션을 페이지네이션 컨테이너에 추가
        paginationContainer.appendChild(ul);
    }

    fetchPage(1, 10);


</script>

<!--<script src="/js/payment/payment.js"></script>-->
</body>
</html>